Aikaleima,Do you consent to have your answers processed in the manner described above?,Years of experience in cloud-native architecture?,Years of experience in software architecture in general?,Years of experience in Information Technology in general?,"How do you prioritize these software quality attributes when designing cloud-native architecture? 

In this question they cannot be selected as ""equally important"". [Performance]","How do you prioritize these software quality attributes when designing cloud-native architecture? 

In this question they cannot be selected as ""equally important"". [Reliability]","How do you prioritize these software quality attributes when designing cloud-native architecture? 

In this question they cannot be selected as ""equally important"". [Maintainability]","How do you prioritize these software quality attributes when designing cloud-native architecture? 

In this question they cannot be selected as ""equally important"". [Scalability]","How do you prioritize these software quality attributes when designing cloud-native architecture? 

In this question they cannot be selected as ""equally important"". [Security]",How do you address maintainability with platform- and technology choices?,How do you address maintainability with application architecture?
,,,,,,,,,,,
,,,,,,,,,,,
,,,,,,,,,,,
20.3.2023 klo 14.04.20,Sounds OK to me!,2-5 years,10+ years,10+ years,More important,Important,Less important,Least important,Most important,"Usually I would stick with offerings from the same provider... i.e. if hosting on Azure and I'm looking for a security suite, I'd highly prefer using Microsoft Defender and Sentinel, rather than a third-party product. Integrations between them are usually superior.

Another factor is the capability of the team. Higher preference will be given to technologies that the team already knows. The availability to the inner workings (i.e. exposing debug logs to aid maintaining) is also a factor.

Lesser factors to consider are support offered by the provider (which obviously affects the choice of purely open-source products).","Modularise the architecture, and enable each component to be maintained/swopped out individually. However, centralise logging for architecture wide debugging."
20.3.2023 klo 14.06.38,Sounds OK to me!,2-5 years,2-5 years,5-10 years,Least important,Important,More important,Less important,Most important,"Future-proof technologies, limiting number of technological dependencies, proper DevOps practices","limiting number of technological dependencies, proper application architecture (SOLID), designing with the goal in mind, ""circus horse jumps only as high as it needs"""
20.3.2023 klo 14.07.16,Sounds OK to me!,2-5 years,0-2 years,10+ years,Important,Most important,Less important,Least important,More important,"PaaS where possible, atoscaling + stateless where possible, Infrastructure as code, automated CI/CD pipelines.","loosely coupling, stateless components, microservices"
20.3.2023 klo 14.07.44,Sounds OK to me!,2-5 years,10+ years,10+ years,Less important,More important,Important,Least important,Most important,"Use up-to-date (but established) technology, avoid shortcuts/cutting corners, CLEAR RESOURCE NAMING, clearly defined processes","Use up-to-date (but established) frameworks, avoid convoluted architectures, avoid shortcuts/cutting corners, CLEAR NAMING"
20.3.2023 klo 14.13.29,Sounds OK to me!,5-10 years,5-10 years,10+ years,Important,Less important,Least important,Most important,More important,-,-
20.3.2023 klo 14.13.49,Sounds OK to me!,5-10 years,10+ years,10+ years,Less important,Least important,More important,Important,Most important,Consistency is what is heavily missing during evolving application development,Once more consistency - instead of integration of many services you should be aware of each new cloud service costs maintainability 
20.3.2023 klo 14.20.10,Sounds OK to me!,5-10 years,2-5 years,10+ years,Least important,More important,Important,Less important,Most important,"IaC, tests when updates are planned, no breaking changes or clear path to update","IaC, configuration as a code"
20.3.2023 klo 14.46.17,Sounds OK to me!,5-10 years,5-10 years,10+ years,Least important,Most important,Important,Less important,More important,"Don't avoid vendor lock-ins, but make sure it's split up in small components, so each can be maintained and replaced if needed.",A great CI/CD goes a long way
21.3.2023 klo 11.46.21,Sounds OK to me!,2-5 years,5-10 years,5-10 years,Least important,Most important,More important,Important,Less important,"VCS, ticket system, tests, use well known language and framework, write docs, architecture decision log, stick to base technologies in (for example) AWS","Modularity and KISS, feel like application architecture is less of an issue than HOW the implementation phase is going (time pressure, ....)"
21.3.2023 klo 13.09.55,Sounds OK to me!,5-10 years,0-2 years,10+ years,Least important,More important,Less important,Important,Most important,"picking mainstream platform if possible, using the more widely used technologies makes it easier to find people with skills to maintain it in the future","if possible, microservices, decoupled components make it easier to maintain in parts and more flexibly"
21.3.2023 klo 15.18.31,Sounds OK to me!,0-2 years,2-5 years,2-5 years,More important,Most important,Less important,Least important,Important,Most of the cloud-native service provides the managed service required less maintenance,Use managed cloud service
22.3.2023 klo 9.54.10,Sounds OK to me!,5-10 years,10+ years,10+ years,Least important,Important,More important,Less important,Most important,"IaC, clear responsibilies, at least once-a-year review + changes as needed","IaC, clear responsibilities, app releases versioned, code reviewed and replaced well before EOL, security fixes delivered"
23.3.2023 klo 9.52.06,Sounds OK to me!,0-2 years,2-5 years,5-10 years,Important,More important,Less important,Most important,Least important,By using commonly used technologies,"By using services that update automatically, or having updates possible to be made as easily as possible if they need to be done manually."
13.4.2023 klo 8.43.41,Sounds OK to me!,2-5 years,10+ years,10+ years,More important,Most important,Least important,Less important,Important,I prefer de facto solutions to assure platform and technology maintenance by the vendors.,Microservices architecture (loosely coupled) can be more easily maintainable than a layered architecture. Just need to avoid too granular/small microservices to prevent complexity in service relations and interactions. Every new microservice in transactions call path/sequence brings extra delay and complexity.
21.4.2023 klo 17.43.47,Sounds OK to me!,5-10 years,0-2 years,10+ years,Less important,More important,Important,Least important,Most important,"Scalable (use case to use case, VMSS, HA) solution with resiliency (AV set, AV zone) and highly secure (WAF, App gateway(depends on external/internal app), Network rules (NSG/FW), right sizing (performance), cost (depends on environment of the application (dev/test, UAT, prod)",HA (with DR for prod) with secure and scalable