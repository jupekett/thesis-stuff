@Online{JYKDOK,
  title =        {JYKDOK international articles search},
  year =         {2023},
  url =          {https://jyu.finna.fi/primo},
  urldate =      {2023-02-26}
}

@Online{GoogleScholar,
  title =        {Google Scholar},
  year =         {2023},
  url =          {http://scholar.google.com},
  urldate =      {2023-02-26}
}

@mastersthesis{Kaihlavirta2022,
  author = {Johanna Kaihlavirta},
  title =  {Time tracking in software maintenance service},
  school = {University of Jyväskylä},
  year = {2022},
  url = {https://jyx.jyu.fi/bitstream/handle/123456789/84170/URN%3aNBN%3afi%3ajyu-202212015437.pdf?sequence=1&isAllowed=y}
}

@article{Likert,
    author={Likert, Rensis},
    title={A Technique for the Measurement of Attitudes},
    year={1932},
    volume={140},
    pages={1-55},
    journal = {Archives of Psychology},
}


%%%%%%%%%%%%%%% Maintainability / Quality %%%%%%%%%%%%%%%%%

@ARTICLE{Vale2022,
    author={Vale, Guilherme
        and Correia, Filipe Figueiredo
        and Guerra, Eduardo Martins
        and de Oliveira Rosa, Thatiane
        and Fritzsch, Jonas
        and Bogner, Justus},
    title={Designing Microservice Systems Using Patterns: An Empirical Study on Quality Trade-Offs},
    year={2022},
    % month={1},
    % day={10},
    publisher={Cornell University Library, arXiv.org},
    address={Ithaca},
    keywords={Business And Economics--Banking And Finance; Software Engineering; Quality management; Applications programs; Software; Tradeoffs},
    abstract={The promise of increased agility, autonomy, scalability, and reusability has made the microservices architecture a {\backslash}textit{\{}de facto{\}} standard for the development of large-scale and cloud-native commercial applications. Software patterns are an important design tool, and often they are selected and combined with the goal of obtaining a set of desired quality attributes. However, from a research standpoint, many patterns have not been widely validated against industry practice, making them not much more than interesting theories. To address this, we investigated how practitioners perceive the impact of 14 patterns on 7 quality attributes. Hence, we conducted 9 semi-structured interviews to collect industry expertise regarding (1) knowledge and adoption of software patterns, (2) the perceived architectural trade-offs of patterns, and (3) metrics professionals use to measure quality attributes. We found that many of the trade-offs reported in our study matched the documentation of each respective pattern, and identified several gains and pains which have not yet been reported, leading to novel insight about microservice patterns.},
    % note={Copyright - {\textcopyright} 2022. This work is published under http://arxiv.org/licenses/nonexclusive-distrib/1.0/ (the ``License'').  Notwithstanding the ProQuest Terms and Conditions, you may use this content in accordance with the terms of the License.},
    % note={Last updated - 2022-01-13},
    url={https://www.proquest.com/working-papers/designing-microservice-systems-using-patterns/docview/2619059217/se-2},
    % language={English}
}

@ARTICLE{Bouwers2010,
    author={Bouwers, Eric and van Deursen, Arie},
    journal={IEEE Software},
    title={A Lightweight Sanity Check for Implemented Architectures},
    year={2010},
    volume={27},
    number={4},
    pages={44-50},
    abstract={Software architecture has been loosely defined as the organizational structure of a software system, including the components, connectors, constraints, and rationale.1 Evaluating a system's software architecture helps stakeholders to check whether the architecture complies with their interests. Additionally, the evaluation can result in a common understanding of the architecture's strengths and weaknesses. All of this helps to determine which quality criteria the system meets because "architectures allow or preclude nearly all of the system's quality attributes."2},
    keywords={Computer architecture;Software architecture;Software systems;Connectors;System software;software architectures;software architecture evaluation;architecture erosion;software quality},
    doi={10.1109/MS.2010.60},
    ISSN={1937-4194},
    % month={7},
}

@article{Gorla2010,
    title = {Determinants of software quality: A survey of information systems project managers},
    journal = {Information and Software Technology},
    volume = {52},
    number = {6},
    pages = {602-610},
    year = {2010},
    issn = {0950-5849},
    doi = {https://doi.org/10.1016/j.infsof.2009.11.012},
    % url = {https://www.sciencedirect.com/science/article/pii/S0950584909002122},
    author = {Narasimhaiah Gorla and Shang-Che Lin},
    keywords = {Factor analysis, Information systems projects, Software quality, Reliability, Maintainability, Usefulness},
    abstract = {Software quality is important for the success of any information systems (IS). In this research, we find the determinants of software quality. We used five attributes for software quality: system reliability, maintainability, ease of use, usefulness, and relevance. By surveying 112 IS project managers, we collected data about their perceptions on the software quality attributes and their determinants. We arrived at six factors through exploratory factor analysis. We determined the individual factors that impacted the software quality attributes; for example, reliability is associated with responsiveness of IS department; ease of use is influenced by the capabilities of users and attitude of management; and usefulness is impacted by capabilities of IS department and responsiveness of IS department. We show that organizational factors are more important than technical factors in impacting software quality in IS projects. We provide implications of our research to practice and to future research.}
}

@article{Mumtaz2021,
    title = {A systematic mapping study on architectural smells detection},
    journal = {Journal of Systems and Software},
    volume = {173},
    pages = {110885},
    year = {2021},
    issn = {0164-1212},
    doi = {https://doi.org/10.1016/j.jss.2020.110885},
    % url = {https://www.sciencedirect.com/science/article/pii/S0164121220302752},
    author = {Haris Mumtaz and Paramvir Singh and Kelly Blincoe},
    keywords = {Architectural smells, Architectural debt, Antipatterns, Smell detection techniques, Systematic mapping study},
    abstract = {The recognition of the need for high-quality software architecture is evident from the increasing trend in investigating architectural smells. Detection of architectural smells is paramount because they can seep through to design and implementation stages if left unidentified. Many architectural smells detection techniques and tools are proposed in the literature. The diversity in the detection techniques and tools suggests the need for their collective analysis to identify interesting aspects for practice and open research areas. To fulfill this, in this paper, we unify the knowledge about the detection of architectural smells through a systematic mapping study. We report on the existing detection techniques and tools for architectural smells to identify their limitations. We find there has been limited investigation of some architectural smells (e.g., micro-service smells); many architectural smells are not detected by tools yet; and there are limited empirical validations of techniques and tools. Based on our findings, we suggest several open research problems, including the need to (1) investigate undetected architectural smells (e.g., Java package smells), (2) improve the coverage of architectural smell detection across architecture styles (e.g., service-oriented and cloud), and (3) perform empirical validations of techniques and tools in industry across different languages and project domains.}
}

@Article{Moses2009,
    author={Moses, John},
    title={Should we try to measure software quality attributes directly?},
    journal={Software Quality Journal},
    year={2009},
    % month={6},
    % day={01},
    volume={17},
    number={2},
    pages={203-213},
    abstract={Most external software quality attributes are conceptually subjective. For example, maintainability is an external software quality attribute, and it is subjective because interpersonally agreed definitions for the attribute include the phrase `the ease with which maintenance tasks can be performed'. Subjectivity clearly makes measurement of the attributes and validation of prediction systems for the attributes problematic. In fact, in spite of the definitions, few statistically valid attempts at determining the predictive capability of prediction systems for external quality attributes have been published. When validations have been attempted, one approach used is to ask experts to indicate if the values provided by the prediction system informally agree with the experts' intuition. These attempts are undertaken without determining, independently of the prediction system, whether the experts are capable of direct consistent measurement of the attribute. Hence, a statistically valid and unbiased estimate of the predictive capability of the prediction system cannot be obtained (because the experts' measurement process is not independent of the prediction system's values). In this paper, it is argued that the problem of subjective measurement of quality attributes should not be ignored if quality is to be introduced into software in a controlled way. Further, it is argued that direct measurement of quality attributes should be encouraged and that in fact such measurement can be quantified to establish consistency using an existing approach. However, the approach needs to be made more accessible to promote its use. In so doing, it would be possible to decide whether consistent independent estimates of the true values of software quality attributes can be assigned and prediction systems for quality attributes developed.},
    issn={1573-1367},
    doi={https://doi.org/10.1007/s11219-008-9071-6}
}

@techreport{ISO5055,
    author = {{ISO/IEC 5055:2021(E)}},
    type = {Standard},
    key = {ISO/IEC 5055:2021(E)},
    % month = {3},
    year = {2021},
    title = {Information technology - Software measurement - Software quality measurement - Automated source code quality measures},
    volume = {2021},
    address = {Geneva, CH},
    institution = {International Organization for Standardization}
}

@inproceedings{Broy2006,
    author = {Broy, Manfred and Deissenboeck, Florian and Pizka, Markus},
    title = {Demystifying Maintainability},
    year = {2006},
    isbn = {1595933999},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    % url = {https://doi-org.ezproxy.jyu.fi/10.1145/1137702.1137708},
    doi = {10.1145/1137702.1137708},
    abstract = {Due to its economic impact "maintainability" is broadly accepted as an important quality attribute of software systems. But in contrast to attributes such as performance and correctness, there is no common understanding of what maintainability actually is, how it can be achieved, measured, or assessed. In fact, every software organization of significant size seems to have its own definition of maintainability. We address this problem by defining an unique two-dimensional quality model that associates maintenance activities with system properties including the capabilities of the organization. The separation of activities and properties facilitates the identification of sound quality criteria and allows to reason about their interdependencies. The resulting quality controlling process enforces these criteria through tool-supported measurements as well as manual inspections. We report on our experiences with the incremental development of the quality model and its application to large scale commercial software projects. Among the positive effects are a slowdown of decay and a significantly increased awareness for long-term quality aspects.},
    booktitle = {Proceedings of the 2006 International Workshop on Software Quality},
    pages = {21-26},
    numpages = {6},
    keywords = {quality assessment, quality models, maintainability},
    location = {Shanghai, China},
    series = {WoSQ '06}
}

@article{Li2021,
    title = {Understanding and addressing quality attributes of microservices architecture: A Systematic literature review},
    journal = {Information and Software Technology},
    volume = {131},
    pages = {106449},
    year = {2021},
    issn = {0950-5849},
    doi = {https://doi.org/10.1016/j.infsof.2020.106449},
    % url = {https://www.sciencedirect.com/science/article/pii/S0950584920301993},
    author = {Shanshan Li and He Zhang and Zijia Jia and Chenxing Zhong and Cheng Zhang and Zhihao Shan and Jinfeng Shen and Muhammad Ali Babar},
    keywords = {Microservices, Monolith, Quality attributes, Systematic literature review},
    abstract = {Context: As a rapidly adopted architectural style in software engineering, Microservices Architecture (MSA) advocates implementing small-scale and independently distributed services, rather than binding all functions into one monolith. Although many initiatives have contributed to the quality improvement of microservices-based systems, there is still a lack of a systematic understanding of the Quality Attributes (QAs) associated with MSA. Objective: This study aims to investigate the evidence-based state-of-the-art of QAs of microservices-based systems. Method: We carried out a Systematic Literature Review (SLR) to identify and synthesize the relevant studies that report evidence related to QAs of MSA. Results: Based on the data extracted from the 72 selected primary studies, we portray an overview of the six identified QAs most concerned in MSA, scalability, performance, availability, monitorability, security, and testability. We identify 19 tactics that architecturally address the critical QAs in MSA, including two tactics for scalability, four for performance, four for availability, four for monitorability, three for security, and two for testability. Conclusion: This SLR concludes that for MSA-based systems: 1) Although scalability is the commonly acknowledged benefit of MSA, it is still an indispensable concern among the identified QAs, especially when trading-off with other QAs, e.g., performance. Apart from the six identified QAs in this study, other QAs for MSA like maintainability need more attention for effective improvement and evaluation in the future. 3) Practitioners need to carefully make the decision of migrating to MSA based on the return on investment, since this architectural style additionally cause some pains in practice.}
}

@article{Arvanitou2017,
    title = {A mapping study on design-time quality attributes and metrics},
    journal = {Journal of Systems and Software},
    volume = {127},
    pages = {52-77},
    year = {2017},
    issn = {0164-1212},
    doi = {https://doi.org/10.1016/j.jss.2017.01.026},
    % url = {https://www.sciencedirect.com/science/article/pii/S016412121730016X},
    author = {Elvira Maria Arvanitou and Apostolos Ampatzoglou and Alexander Chatzigeorgiou and Matthias Galster and Paris Avgeriou},
    keywords = {Software quality, Measurement, Design-time quality attributes, Mapping study},
    abstract = {Developing a plan for monitoring software quality is a non-trivial task, in the sense that it requires: (a) the selection of relevant quality attributes, based on application domain and development phase, and (b) the selection of appropriate metrics to quantify quality attributes. The metrics selection process is further complicated due to the availability of various metrics for each quality attribute, and the constraints that impact metric selection (e.g., development phase, metric validity, and available tools). In this paper, we shed light on the state-of-research of design-time quality attributes by conducting a mapping study. We have identified 154 papers that have been included as primary studies. The study led to the following outcomes: (a) low-level quality attributes (e.g., cohesion, coupling, etc.) are more frequently studied than high-level ones (e.g., maintainability, reusability, etc.), (b) maintainability is the most frequently examined high-level quality attribute, regardless of the application domain or the development phase, (c) assessment of quality attributes is usually performed by a single metric, rather than a combination of multiple metrics, and (d) metrics are mostly validated in an empirical setting. These outcomes are interpreted and discussed based on related work, offering useful implications to both researchers and practitioners.}
}

@inproceedings{Bogner2018,
    author = {Bogner, Justus and Fritzsch, Jonas and Wagner, Stefan and Zimmermann, Alfred},
    year = {2018},
    % month = {06},
    pages = {},
    booktitle = {1st International Conference on Technical Debt (TechDebt’18)},
    title = {Limiting Technical Debt with Maintainability Assurance - An Industry Survey on Used Techniques and Differences with Service-and Microservice-Based Systems},
    doi = {10.1145/3194164.3194166}
}

@InProceedings{Lichtenthaler2022,
    author="Lichtenthäler, Robin and Wirtz, Guido",
    editor="Montesi, Fabrizio and Papadopoulos, George Angelos and Zimmermann, Wolf",
    title="Towards a Quality Model for Cloud-native Applications",
    booktitle="Service-Oriented and Cloud Computing",
    year="2022",
    publisher="Springer International Publishing",
    address="Cham",
    pages="109--117",
    abstract="Cloud-native is a recent paradigm for web-based service-oriented applications. Because it covers a wide range of concepts and lacks a commonly accepted definition, evaluating software architectures according to it is difficult. Therefore, a quality model is presented, aligned with the Quamoco meta model and based on both practitioner books and scientific literature. It focuses on the design time and considers multiple quality attributes in relation. This initial quality model together with an evaluation of already existing measures is intended as a basis for approaches aiming to evaluate cloud-native application architectures.",
    % isbn="978-3-031-04718-3"
}



%%%%%%%%%%%%%%% Cloud-native %%%%%%%%%%%%%%%

@Article{Patrizio2018,
    author={Patrizio, Andy},
    title={What is cloud-native? The modern way to develop software},
    journal={InfoWorld.com},
    year={2018},
    % month={6},
    % day={14},
    publisher={Foundry},
    address={San Mateo},
    keywords={Computers--Computer Industry; Cloud computing; Servers; Advantages; Software development; Linux; Best practice; Customer services; Automation; Open source software; United States--US},
    abstract={The CNCF defines ``cloud-native'' a little more narrowly, to mean using open source software stack to be containerized, where each part of the app is packaged in its own container, dynamically orchestrated so each part is actively scheduled and managed to optimize resource utilization, and microservices-oriented to increase the overall agility and maintainability of applications. Cloud-native app development typically includes devops, agile methodology, microservices, cloud platforms, containers like Kubernetes and Docker, and continuous delivery---in short, every new and modern method of application deployment. Because of this, you really want to have a platform-as-a-service (PaaS) model. Languages On-premises apps written to run on company servers tend to be written in traditional languages, like C/C++, C{\#} or another Visual Studio language if deployed on a Windows Server platform, and enterprise Java.},
    % note={Name - Linux Foundation},
    % note={Copyright - Copyright Infoworld Media Group Jun 14, 2018},
    % note={Last updated - 2022-11-22},
    % note={SubjectsTermNotLitGenreText - United States--US},
    url={https://www.proquest.com/trade-journals/what-is-cloud-native-modern-way-develop-software/docview/2055357601/se-2?accountid=11774},
    % language={English}
}

@Online{Microsoft2022-CNA,
    author = {Vettor, Rob and Pine, David and Jain, Tarun and Peter, Szanto and Majid, Omair and Warren, Genevieve and Sharkey, Kent and Özeloğlu, Gökhan and Brisebois, Alexandre and Coulter, David and Victor, Youssef and Singh, Shailendra and Schonning, Nick and Nava, Andy and Smith, Steve and Wenzel, Maira and Anil, Nish},
    title = {What is Cloud Native?},
    howpublished = {\url{https://learn.microsoft.com/en-us/dotnet/architecture/cloud-native/definition}},
    year = {2022},
    % month = {7},
    % day = {4},
    urldate = {2023-03-25},
}

@Online{Microsoft2022-Communication,
    author = {Vettor, Rob and Pine, David and Coulter, David and Schonning, Nick and Wenzel, Maira},
    title = {Cloud-native communication patterns},
    howpublished = {\url{https://learn.microsoft.com/en-us/dotnet/architecture/cloud-native/communication-patterns}},
    year = {2022},
    % month = {7},
    % day = {4},
    urldate = {2023-03-25},
}

@Online{Microsoft2022-Resiliency,
    author = {Vettor, Rob and Pine, David and Coulter, Nick and Wenzel, Maira and Smith, Steve},
    title = {Cloud-native communication patterns},
    howpublished = {\url{https://learn.microsoft.com/en-us/dotnet/architecture/cloud-native/resiliency}},
    year = {2022},
    % month = {7},
    % day = {4},
    urldate = {2023-03-25},
}

@Online{Microsoft2022-Data,
    author = {Vettor, Rob and Pine, David and Coulter, David and Victor, Youssef and Schonning, Nick and Wenzel, Maira},
    title = {Cloud-native communication patterns},
    howpublished = {\url{https://learn.microsoft.com/en-us/dotnet/architecture/cloud-native/distributed-data}},
    year = {2022},
    % month = {7},
    % day = {4},
    urldate = {2023-03-25},
}

@Online{Spiceworks2021,
    author = {Rudisail, Brad},
    title = {Cloud Scalability vs Cloud Elasticity: Here's How They Differ - Spiceworks},
    howpublished = {\url{https://www.spiceworks.com/tech/cloud/articles/cloud-elasticity-and-scalability-difference/}},
    year = {2021},
    % month = {11},
    % day = {11},
    urldate = {2023-04-10},
}

@article{Kratzke2017,
    title = {Understanding cloud-native applications after 10 years of cloud computing - A systematic mapping study},
    journal = {Journal of Systems and Software},
    volume = {126},
    pages = {1-16},
    year = {2017},
    issn = {0164-1212},
    doi = {https://doi.org/10.1016/j.jss.2017.01.001},
    % url = {https://www.sciencedirect.com/science/article/pii/S0164121217300018},
    author = {Nane Kratzke and Peter-Christian Quint},
    keywords = {Cloud-native application, CNA, Systematic mapping study, Elastic platform, Microservice, Self service, Pattern, Softwareization},
    abstract = {It is common sense that cloud-native applications (CNA) are intentionally designed for the cloud. Although this understanding can be broadly used it does not guide and explain what a cloud-native application exactly is. The term “cloud-native” was used quite frequently in birthday times of cloud computing (2006) which seems somehow obvious nowadays. But the term disappeared almost completely. Suddenly and in the last years the term is used again more and more frequently and shows increasing momentum. This paper summarizes the outcomes of a systematic mapping study analyzing research papers covering “cloud-native” topics, research questions and engineering methodologies. We summarize research focuses and trends dealing with cloud-native application engineering approaches. Furthermore, we provide a definition for the term “cloud-native application” which takes all findings, insights of analyzed publications and already existing and well-defined terminology into account.}
}

@Online{CNAF2018,
    author = {Noval, Ahmad and Aniszczyk, Chris and Rabah, Vincent and Vasilev, Orlin and Jakobczyk, Michal and Cisterna, Mario and Liebler, Dominik and Miasnikov, Egor and Kohn, Dan and Warachet S., Di and Saadoune, Chamseddine and Zandberge, Peter and Jacquot, Matthieu and Yi, June and Lord, Joel and Kokoska, Christian and Yalon, Erez and Candino, Enrico and Oh, Daniel and Koç, Canberk and Áron, Kiss and de Moraes Pereira, Arnaldo and Babenia, Anatoli and Perrin, Amye Scavarda and Gomes, Joao Duarte and Sharma, Sachin and Steckenborn, Tobias and Phanama, Yudi A and javalc6 and c-nyan and AndresTha},
    title = {CNCF Cloud Native Definition v1.0 · cncf/toc},
    howpublished = {\url{https://github.com/cncf/toc/blob/main/DEFINITION.md}},
    year = {2022},
    % month = {8},
    % day = {29},
    urldate = {2023-04-10},
}

@ARTICLE{Gannon2017,
    author={Gannon, Dennis and Barga, Roger and Sundaresan, Neel},
    journal={IEEE Cloud Computing},
    title={Cloud-Native Applications},
    year={2017},
    volume={4},
    number={5},
    pages={16-21},
    abstract={Cloud-native is a term that is invoked often but seldom defined beyond saying “we built it in the cloud” as opposed to “on-prem”. However, there is now an emerging consensus around key ideas and informal applications design patterns that have been adopted and used in many successful cloud applications. In this introduction, we will describe these cloud-native concepts and illustrate them with examples. We will also look at the technical trends that may give us an idea about the future of cloud applications. We begin by discussing the basic properties that many cloud-native apps have in common. Once we have characterized them, we can then describe how these properties emerge from the technical design patterns.},
    keywords={cloud-native;distributed computing;microservices;serverless;cloud computing},
    doi={10.1109/MCC.2017.4250939},
    ISSN={2325-6095},
    % month={9},
}

@Online{Roberts2018,
	author = {Roberts, Mike},
	title = {Serverless Architectures},
	url = {https://martinfowler.com/articles/serverless.html},
	year = {2018},
    % month = {5},
    % day = {22},
	urldate = {2023-09-02},
}

@Online{AWS-serverless,
	author = {{Amazon Web Services}},
	title = {Serverless Computing},
	url = {https://aws.amazon.com/serverless/},
	year = {2023},
	urldate = {2023-09-02},
}

%%%%%%%%%%%%%%%% Architecture %%%%%%%%%%%%%%%%%

@Online{Heroku2011,
    author = {Wiggins, Adam},
    title = {The New Heroku (Part 4 of 4): Erosion-resistance \& Explicit Contracts},
    url = {https://blog.heroku.com/the_new_heroku_4_erosion_resistance_explicit_contracts},
    year = {2011},
    % month = {6},
    % day = {28},
    urldate = {2023-03-26},
}

@Online{12factor2017,
    author = {Wiggins, Adam},
    title = {The Twelve-Factor App},
    url = {https://12factor.net/},
    year = {2017},
    urldate = {2023-03-26},
}

@book{Bass1998,
    author = {Bass, Len and Clements, Paul and Kazman, Rick},
    title = {Software Architecture in Practice},
    year = {1998},
    isbn = {0201199300},
    publisher = {Addison-Wesley Longman Publishing Co., Inc.},
    address = {USA}
}

@book{Bass2003,
    added-at = {2015-02-10T12:18:15.000+0100},
    author = {Bass, Len and Clements, Paul and Kazman, Rick},
    biburl = {https://www.bibsonomy.org/bibtex/257ebb79e084389b8cf42dadfe8e455b0/kurkha},
    description = {Software Architecture in Practice - Len Bass, Paul Clements, Rick Kazman - Google books},
    interhash = {e62e63642f43f8649c0971bf39f398d0},
    intrahash = {57ebb79e084389b8cf42dadfe8e455b0},
    isbn = {9780321154958},
    keywords = {softwareEngineering},
    lccn = {2003045300},
    publisher = {Addison-Wesley},
    series = {SEI series in software engineering},
    timestamp = {2015-02-10T12:18:15.000+0100},
    title = {Software Architecture in Practice},
    url = {http://books.google.fi/books?id=mdiIu8Kk1WMC},
    year = 2003
}

@book{Koskimies2005,
    title = "Ohjelmistoarkkitehtuurit",
    author = "K. Koskimies and T. Mikkonen",
    % note = "Contribution: organisation=ohj,FACT1=1",
    year = "2005",
    % language = "English",
    isbn = "952-14-0862-6",
    series = "Valikko-sarja",
    publisher = "Talentum",
}

@techreport{IEEE42010,
    % NOTE: This is old, 2022 is the newest one :(
    author={{ISO/IEC/IEEE 42010:2007}},
    type={standard},
    journal={ISO/IEC 42010 IEEE Std 1471-2000 First edition 2007-07-15}, 
    title={Recommended Practice for Architectural Description of Software-Intensive Systems}, 
    year={2007},
    volume={},
    number={},
    pages={1-24},
    institution = {International Organization for Standardization},
    doi={10.1109/IEEESTD.2007.386501}
}

@techreport{IEEE12207,
    author={{ISO/IEC/IEEE 12207:2017(E)}},
    type={standard},
    journal={ISO/IEC/IEEE 12207:2017(E) First edition 2017-11}, 
    title={Systems and software engineering -- Software life cycle processes}, 
    year={2017},
    volume={},
    number={},
    pages={1-157},
    institution = {International Organization for Standardization},
    doi={10.1109/IEEESTD.2017.8100771}
}

@article{Pahl2018,
    author = {Pahl, Claus and Jamshidi, Pooyan and Zimmermann, Olaf},
    title = {Architectural Principles for Cloud Software},
    year = {2018},
    issue_date = {May 2018},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {18},
    number = {2},
    issn = {1533-5399},
    % url = {https://doi.org/10.1145/3104028},
    % doi = {10.1145/3104028},
    abstract = {A cloud is a distributed Internet-based software system providing resources as tiered services. Through service-orientation and virtualization for resource provisioning, cloud applications can be deployed and managed dynamically. We discuss the building blocks of an architectural style for cloud-based software systems. We capture style-defining architectural principles and patterns for control-theoretic, model-based architectures for cloud software. While service orientation is agreed on in the form of service-oriented architecture and microservices, challenges resulting from multi-tiered, distributed and heterogeneous cloud architectures cause uncertainty that has not been sufficiently addressed. We define principles and patterns needed for effective development and operation of adaptive cloud-native systems.},
    journal = {ACM Trans. Internet Technol.},
    articleno = {17},
    numpages = {23},
    keywords = {model-based controller, devops, cloud-native, adaptive system, architectural style, software architecture, Cloud computing, uncertainty, microservice, control theory}
}
